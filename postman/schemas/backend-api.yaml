openapi: 3.0.0
info:
    title: SkinCheck.AI API Documentation
    version: "1.0"
    description: API documentation for SkinCheck.AI | Capstone Project
    contact:
        name: Dimas Tri Mustakim
        email: c151dsx1673@bangkit.academy
    license:
        name: MIT License
        url: "https://opensource.org/license/mit/"
    termsOfService: https://github.com
servers:
    - url: "http://localhost:3000"
      description: localhost server
tags:
    - name: User
      description: Everything needed for user.
    - name: Products
      description: For function related to skincare product.
    - name: Logs
      description: For image analysis Logs
    - name: Machine Learning
      description: Ml use
    - name: Internal Use
      description: Endpoint for microservices function
    - name: Article
      description: Endpoint for getting tips
paths:
    /profile:
        parameters: []
        get:
            summary: Get User Information
            operationId: get-profile
            description: Retrieve the information of the user.
            tags:
                - User
            responses:
                "200":
                    description: User Found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
        patch:
            summary: Update User Information
            operationId: patch-users-userId
            description: Update the information of an existing user.
            tags:
                - User
            responses:
                "200":
                    description: User Updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateUserRequest"
                description: Patch user properties to update.
    /profile/uploadImage:
        post:
            summary: Renew the profile photo
            responses:
                "200":
                    description: Image uploaded successfully!
            operationId: post-profile-uploadImage
            description: Upload new profile photo.
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                file:
                                    type: string
                description: "To update profile image"
            tags:
                - User
        parameters: []
    /products:
        get:
            summary: Getting a list of products available
            responses:
                "200":
                    description: Products data retrieved successfully.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/SkincareProduct"
            operationId: get-products
            description: To retrieve product list
            tags:
                - Products
        parameters: []
    "/products/{id}":
        parameters:
            - schema:
                  type: string
              name: id
              in: path
              required: true
        get:
            summary: Getting specific product
            parameters:
                - in: query
                  name: productType
                  schema:
                      type: string
                  description: specific product type that want to be queried
            responses:
                "200":
                    description: Product data retrieved successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SkincareProduct"
            operationId: get-products-productId
            description: Getting specific product information.
            tags:
                - Products
    /products/recommendation:
        get:
            summary: Getting the list of recommendation
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/SkincareProduct"
            operationId: get-products-recommendation
            tags:
                - Products
            description: getting list recommendation
            parameters:
                - in: query
                  name: skinType
                  schema:
                      type: string
                  description: Get the recommendation for this specific skinType
    /machine-learning/request-analyses:
        post:
            summary: ""
            operationId: post-ml-analysis
            description: "Endpoint for requesting image analysis"
            tags:
                - Machine Learning
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: number
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                image:
                                    type: string
                                    format: binary
    /machine-learning/report-analyses:
        post:
            summary: "Endpoint for ML models reporting back the result"
            operationId: post-report-analysis
            tags:
                - Machine Learning
                - Internal Use
            responses:
                "200":
                    description: OK
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AnalysisReport"
    /logs:
        get:
            summary: Getting a list of log analysis for the user
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/LogData"
            operationId: get-analyses
            tags:
                - Logs
        parameters: []
    "/logs/{id}":
        parameters:
            - schema:
                  type: number
              name: id
              in: path
              required: true
        get:
            summary: Getting the detail of the analysis
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/LogData"
            operationId: get-analyses-id
            description: ""
            tags:
                - Logs
    /articles:
        get:
            summary: Your GET endpoint
            tags:
                - Article
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Article"
            operationId: get-article
            description: Get list article
        parameters: []
components:
    schemas:
        BaseResponse:
            title: Response
            type: object
            properties:
                statusCode:
                    type: number
                message:
                    type: string
                data:
                    type: object
        User:
            title: User
            type: object
            properties:
                user_id:
                    type: string
                    format: uuid
                name:
                    type: string
                email:
                    type: string
                    format: email
                picture:
                    type: string
                    format: uri
                birthDate:
                    type: string
                    format: date
                skinType:
                    type: string
                createdAt:
                    type: string
                    format: date
                updatedAt:
                    type: string
                    format: date
        UpdateUserRequest:
            title: Update User Request
            type: object
            properties:
                name:
                    type: string
                birthDate:
                    type: string
                    format: date
                skinType:
                    type: string
        SkincareProduct:
            title: SkincareProduct
            type: object
            properties:
                id:
                    type: string
                image:
                    type: string
                name:
                    type: string
                brand:
                    type: string
                ingredients:
                    type: string
                type:
                    type: string
                price:
                    type: string
                rank:
                    type: string
        LogData:
            title: LogData
            type: object
            properties:
                id:
                    type: number
                score:
                    type: number
                createdAt:
                    type: string
                    format: date
                picture:
                    type: string
                analysisResult:
                    type: array
                    items:
                        $ref: "#/components/schemas/ImageAnalysis"
        ImageAnalysis:
            title: ImageAnalysis
            type: object
            properties:
                picture:
                    type: string
                problemCount:
                    type: string
                category:
                    type: string
                modelResult:
                    type: object
        Article:
            title: Article
            type: object
            properties:
                id:
                    type: number
                title:
                    type: string
                description:
                    type: string
                image:
                    type: string
                    format: uri
        AnalysisReport:
            title: ReportAnalysis
            type: object
            properties:
                id:
                    type: number
                data:
                    type: object
                image:
                    type: string
                    format: uri
                model:
                    type: string
    securitySchemes:
        bearerAuth:
            type: http
            description: JWT Authorization header
            scheme: bearer
            bearerFormat: JWT
security:
    - bearerAuth: []
